'use client';\n\nimport { createClient } from '@supabase/supabase-js';\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { toast } from 'sonner';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  name?: string;\n}\n\ninterface AuthState {\n  user: AuthUser | null;\n  loading: boolean;\n}\n\nclass SupabaseAuthService {\n  private supabase;\n  \n  constructor() {\n    this.supabase = createClient(supabaseUrl, supabaseAnonKey);\n  }\n\n  async signUp(email: string, password: string) {\n    try {\n      const { data, error } = await this.supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          // Redirect to production URL after email confirmation\n          emailRedirectTo: `${window.location.origin}/auth/callback`,\n        },\n      });\n\n      if (error) throw error;\n\n      return {\n        user: data.user,\n        session: data.session,\n        needsEmailConfirmation: !data.session && data.user && !data.user.email_confirmed_at,\n      };\n    } catch (error: any) {\n      console.error('Signup error:', error);\n      throw new Error(this.getErrorMessage(error));\n    }\n  }\n\n  async signIn(email: string, password: string) {\n    try {\n      const { data, error } = await this.supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n\n      return {\n        user: data.user,\n        session: data.session,\n      };\n    } catch (error: any) {\n      console.error('Signin error:', error);\n      throw new Error(this.getErrorMessage(error));\n    }\n  }\n\n  async signOut() {\n    try {\n      const { error } = await this.supabase.auth.signOut();\n      if (error) throw error;\n    } catch (error: any) {\n      console.error('Signout error:', error);\n      throw new Error('Error signing out');\n    }\n  }\n\n  async resendConfirmation(email: string) {\n    try {\n      const { error } = await this.supabase.auth.resend({\n        type: 'signup',\n        email,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback`,\n        },\n      });\n\n      if (error) throw error;\n\n      return { success: true, message: 'Confirmation email sent successfully!' };\n    } catch (error: any) {\n      console.error('Resend confirmation error:', error);\n      return { success: false, message: 'Failed to resend confirmation email' };\n    }\n  }\n\n  onAuthStateChange(callback: (authState: AuthState) => void) {\n    return this.supabase.auth.onAuthStateChange((event, session) => {\n      console.log('Auth state changed:', event, session?.user?.email);\n      callback({\n        user: session?.user ? {\n          id: session.user.id,\n          email: session.user.email || '',\n          name: session.user.user_metadata?.name,\n        } : null,\n        loading: false,\n      });\n    });\n  }\n\n  async getCurrentUser(): Promise<AuthUser | null> {\n    try {\n      const { data: { user }, error } = await this.supabase.auth.getUser();\n      if (error) throw error;\n      \n      return user ? {\n        id: user.id,\n        email: user.email || '',\n        name: user.user_metadata?.name,\n      } : null;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      return null;\n    }\n  }\n\n  private getErrorMessage(error: any): string {\n    console.log('Full error object:', error);\n    \n    if (error.message?.includes('Invalid login credentials')) {\n      return 'Email o contraseña incorrectos';\n    }\n    if (error.message?.includes('Email not confirmed')) {\n      return 'Por favor confirma tu email antes de iniciar sesión';\n    }\n    if (error.message?.includes('User already registered')) {\n      return 'Este email ya está registrado. Intenta iniciar sesión.';\n    }\n    if (error.message?.includes('Password should be at least 6 characters')) {\n      return 'La contraseña debe tener al menos 6 caracteres';\n    }\n    if (error.message?.includes('Unable to validate email address') || error.message?.includes('invalid')) {\n      return 'Email inválido. Usa un dominio real como @gmail.com';\n    }\n    if (error.message?.includes('already exists') || error.message?.includes('already registered')) {\n      return 'Este email ya está registrado. Intenta iniciar sesión.';\n    }\n    return error.message || 'Ha ocurrido un error inesperado';\n  }\n}\n\nexport const supabaseAuthService = new SupabaseAuthService();\nexport type { AuthUser, AuthState };\n\n// Hook for using auth in components\nexport function useSupabaseAuth() {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    loading: true,\n  });\n  const router = useRouter();\n\n  useEffect(() => {\n    // Get initial session\n    supabaseAuthService.getCurrentUser().then(user => {\n      setAuthState({ user, loading: false });\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabaseAuthService.onAuthStateChange(setAuthState);\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signUp = async (email: string, password: string) => {\n    try {\n      const result = await supabaseAuthService.signUp(email, password);\n      \n      if (result.needsEmailConfirmation) {\n        toast.success('¡Cuenta creada! Revisa tu email para confirmar tu cuenta.');\n        return { needsEmailConfirmation: true, email };\n      } else if (result.session) {\n        toast.success('¡Cuenta creada y sesión iniciada!');\n        router.push('/app/dashboard');\n        return { needsEmailConfirmation: false, email };\n      }\n    } catch (error: any) {\n      console.error('Signup error in hook:', error);\n      toast.error(error.message);\n      throw error;\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      await supabaseAuthService.signIn(email, password);\n      toast.success('¡Bienvenido de vuelta!');\n      router.push('/app/dashboard');\n    } catch (error: any) {\n      console.error('Signin error in hook:', error);\n      \n      // Handle specific error cases for better UX\n      if (error.message.includes('Email not confirmed') || error.message.includes('confirma tu email')) {\n        return { needsEmailConfirmation: true, email };\n      }\n      \n      toast.error(error.message);\n      throw error;\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      await supabaseAuthService.signOut();\n      toast.success('Sesión cerrada correctamente');\n      router.push('/');\n    } catch (error: any) {\n      toast.error(error.message);\n    }\n  };\n\n  return {\n    user: authState.user,\n    loading: authState.loading,\n    signUp,\n    signIn,\n    signOut,\n    resendConfirmation: supabaseAuthService.resendConfirmation,\n  };\n}\n